version: '3.8'

services:
  # Test Database Services
  test-mongodb:
    image: mongo:7.0
    container_name: test-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: business-automation-test
    volumes:
      - test-mongodb-data:/data/db
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  test-redis:
    image: redis:7.2-alpine
    container_name: test-redis
    ports:
      - "6379:6379"
    volumes:
      - test-redis-data:/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Test Application Services
  test-api-gateway:
    build:
      context: ./services
      dockerfile: Dockerfile.api-gateway
    container_name: test-api-gateway
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: test
      PORT: 3000
      MONGODB_URI: mongodb://test-mongodb:27017/business-automation-test
      REDIS_URL: redis://test-redis:6379
      JWT_SECRET: test-jwt-secret-key-for-testing-only
      ORCHESTRATOR_URL: http://test-task-orchestrator:3001
      AI_ENGINE_URL: http://test-ai-ml-engine:3002
    depends_on:
      test-mongodb:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  test-task-orchestrator:
    build:
      context: ./services
      dockerfile: Dockerfile.task-orchestrator
    container_name: test-task-orchestrator
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: test
      PORT: 3001
      MONGODB_URI: mongodb://test-mongodb:27017/business-automation-test
      REDIS_URL: redis://test-redis:6379
      AI_ENGINE_URL: http://test-ai-ml-engine:3002
    depends_on:
      test-mongodb:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  test-ai-ml-engine:
    build:
      context: ./services
      dockerfile: Dockerfile.ai-ml-engine
    container_name: test-ai-ml-engine
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: test
      PORT: 3002
      MONGODB_URI: mongodb://test-mongodb:27017/business-automation-test
      REDIS_URL: redis://test-redis:6379
      MODEL_STORAGE_PATH: /app/models
    depends_on:
      test-mongodb:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    volumes:
      - test-ai-models:/app/models
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Test Support Services
  test-mailhog:
    image: mailhog/mailhog:latest
    container_name: test-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - test-network

  test-elasticsearch:
    image: elasticsearch:7.17.0
    container_name: test-elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - test-elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Test Monitoring Services
  test-prometheus:
    image: prom/prometheus:latest
    container_name: test-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./testing/configs/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - test-network

  test-grafana:
    image: grafana/grafana:latest
    container_name: test-grafana
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: testpassword
    volumes:
      - test-grafana-data:/var/lib/grafana
    networks:
      - test-network

  # OWASP ZAP for Security Testing
  test-zap:
    image: owasp/zap2docker-stable
    container_name: test-zap
    ports:
      - "8080:8080"
    command: zap-webswing.sh
    networks:
      - test-network

  # Test Load Balancer (nginx)
  test-nginx:
    image: nginx:alpine
    container_name: test-nginx
    ports:
      - "8080:80"
    volumes:
      - ./testing/configs/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - test-api-gateway
    networks:
      - test-network

volumes:
  test-mongodb-data:
    driver: local
  test-redis-data:
    driver: local
  test-elasticsearch-data:
    driver: local
  test-grafana-data:
    driver: local
  test-ai-models:
    driver: local

networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16