openapi: 3.0.3
info:
  title: Business Task Automation Platform API
  description: |
    Comprehensive API for the Business Task Automation Platform - an AI-powered system 
    for automating various business operations across multiple domains.
  version: 1.0.0
  contact:
    name: API Support
    email: api-support@business-automation.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.business-automation.com
    description: Production server

security:
  - bearerAuth: []

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticate user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials

  /auth/logout:
    post:
      tags: [Authentication]
      summary: User logout
      description: Invalidate user session
      responses:
        '200':
          description: Logout successful

  # User Management
  /users:
    get:
      tags: [Users]
      summary: List users
      description: Get paginated list of users
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: role
          in: query
          schema:
            type: string
            enum: [admin, manager, user, viewer]
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [Users]
      summary: Create user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # Workflow Management
  /workflows:
    get:
      tags: [Workflows]
      summary: List workflows
      description: Get paginated list of workflows
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, running, completed, failed, paused]
        - name: type
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Workflows retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  workflows:
                    type: array
                    items:
                      $ref: '#/components/schemas/Workflow'

    post:
      tags: [Workflows]
      summary: Create workflow
      description: Create a new workflow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkflowRequest'
      responses:
        '201':
          description: Workflow created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'

  /workflows/{workflowId}/execute:
    post:
      tags: [Workflows]
      summary: Execute workflow
      description: Start execution of a workflow
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Workflow execution started
          content:
            application/json:
              schema:
                type: object
                properties:
                  executionId:
                    type: string
                  status:
                    type: string

  # Task Management
  /tasks:
    get:
      tags: [Tasks]
      summary: List tasks
      description: Get paginated list of tasks
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, running, completed, failed]
        - name: priority
          in: query
          schema:
            type: string
            enum: [low, medium, high, critical]
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'

  # AI Services
  /ai/classify-text:
    post:
      tags: [AI Services]
      summary: Classify text
      description: Classify text using AI models
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [text]
              properties:
                text:
                  type: string
                model:
                  type: string
                  default: email-classifier
      responses:
        '200':
          description: Text classified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  classification:
                    type: string
                  confidence:
                    type: number
                    format: float

  /ai/analyze-sentiment:
    post:
      tags: [AI Services]
      summary: Analyze sentiment
      description: Analyze sentiment of text
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [text]
              properties:
                text:
                  type: string
      responses:
        '200':
          description: Sentiment analyzed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sentiment:
                    type: string
                    enum: [positive, negative, neutral]
                  score:
                    type: number
                    format: float

  # Data Analytics
  /data/upload:
    post:
      tags: [Data Analytics]
      summary: Upload data
      description: Upload dataset for processing
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Data uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  datasetId:
                    type: string
                  recordCount:
                    type: integer

  # Reports
  /reports:
    get:
      tags: [Reports]
      summary: List reports
      description: Get available reports
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [performance, analytics, financial, hr]
      responses:
        '200':
          description: Reports retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  reports:
                    type: array
                    items:
                      $ref: '#/components/schemas/Report'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [admin, manager, user, viewer]
        preferences:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateUserRequest:
      type: object
      required: [email, name, password, role]
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        password:
          type: string
          minLength: 8
        role:
          type: string
          enum: [admin, manager, user, viewer]

    Workflow:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed, paused]
        steps:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowStep'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    WorkflowStep:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        config:
          type: object
        status:
          type: string
        order:
          type: integer

    CreateWorkflowRequest:
      type: object
      required: [name, type, steps]
      properties:
        name:
          type: string
        type:
          type: string
        description:
          type: string
        steps:
          type: array
          items:
            type: object

    Task:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed]
        priority:
          type: string
          enum: [low, medium, high, critical]
        assignedTo:
          type: string
        workflowId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Report:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        description:
          type: string
        generatedAt:
          type: string
          format: date-time
        downloadUrl:
          type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
        timestamp:
          type: string
          format: date-time

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'