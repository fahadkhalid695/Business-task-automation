apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: business-automation-hpa
  namespace: default
  labels:
    app: business-automation
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: business-automation-services
  minReplicas: 2
  maxReplicas: 50
  metrics:
  # CPU-based scaling
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  # Memory-based scaling
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  # Request rate scaling
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  # Response time scaling
  - type: Pods
    pods:
      metric:
        name: http_request_duration_p95
      target:
        type: AverageValue
        averageValue: "500m" # 500ms
  # Queue length scaling
  - type: Pods
    pods:
      metric:
        name: task_queue_length
      target:
        type: AverageValue
        averageValue: "50"
  # Error rate scaling
  - type: Pods
    pods:
      metric:
        name: http_error_rate_percent
      target:
        type: AverageValue
        averageValue: "5" # 5% error rate
  # Active connections scaling
  - type: Pods
    pods:
      metric:
        name: active_connections
      target:
        type: AverageValue
        averageValue: "100"
  # Custom business metrics
  - type: Object
    object:
      metric:
        name: pending_workflows
      target:
        type: AverageValue
        averageValue: "20"
      describedObject:
        apiVersion: v1
        kind: Service
        name: task-orchestrator
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      # Allow aggressive scaling for traffic spikes
      - type: Percent
        value: 100
        periodSeconds: 15
      # Allow adding multiple pods quickly
      - type: Pods
        value: 10
        periodSeconds: 15
      # Emergency scaling for critical metrics
      - type: Percent
        value: 200
        periodSeconds: 30
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      # Conservative scale down to avoid thrashing
      - type: Percent
        value: 10
        periodSeconds: 60
      # Gradual pod removal
      - type: Pods
        value: 2
        periodSeconds: 60
      # Faster scale down during low traffic
      - type: Percent
        value: 25
        periodSeconds: 120
      selectPolicy: Min
---
apiVersion: v1
kind: Service
metadata:
  name: custom-metrics-api
spec:
  ports:
  - port: 443
    targetPort: 8443
  selector:
    app: custom-metrics-apiserver
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: custom-metrics-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: custom-metrics-apiserver
  template:
    metadata:
      labels:
        app: custom-metrics-apiserver
    spec:
      containers:
      - name: custom-metrics-apiserver
        image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.10.0
        args:
        - --secure-port=8443
        - --tls-cert-file=/var/run/serving-cert/tls.crt
        - --tls-private-key-file=/var/run/serving-cert/tls.key
        - --logtostderr=true
        - --prometheus-url=http://prometheus:9090/
        - --metrics-relist-interval=1m
        - --v=4
        - --config=/etc/adapter/config.yaml
        ports:
        - containerPort: 8443
        volumeMounts:
        - mountPath: /var/run/serving-cert
          name: volume-serving-cert
          readOnly: true
        - mountPath: /etc/adapter/
          name: config
          readOnly: true
      volumes:
      - name: volume-serving-cert
        secret:
          secretName: cm-adapter-serving-certs
      - name: config
        configMap:
          name: adapter-config